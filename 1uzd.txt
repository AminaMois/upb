/*
To detect polygon from line intersections:
1)Get array of points (list)
2)Get array of lines
3)Determine which lines (considered as functions) have same points
4)Using graph theory name all nodes and edges
5)Apply graph search algorithm (breadth using queue, depth of a graph in recursion stack)
6)Detect cycles in a graph
7)Name vertices and lines of each polygon
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Excel=Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;

namespace upbLinijas
{
    class Program
    {
        static void Main(string[] args)
        {
            //Create COM Objects. Create a COM object for everything that is referenced
            Excel.Application xlApp = new Excel.Application();
            Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(@"C:\MyData\AminaCODE\upb\Linijas.xlsx");
            Excel._Worksheet xlWorksheet = xlWorkbook.Sheets[1];
            Excel.Range xlRange = xlWorksheet.UsedRange;

            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;

            //iterate over the rows and columns and print to the console as it appears in the file
            //excel is not zero based
            for (int i = 1; i <= rowCount; i++)
            {
                for (int j = 1; j <= colCount; j++)
                {
                    //new line
                    if (j == 1)
                        Console.Write("\r\n");

                    //write the value to the console
                    if (xlRange.Cells[i, j] != null && xlRange.Cells[i, j].Value2 != null)
                        Console.Write(xlRange.Cells[i, j].Value2.ToString() + "\t");

                    //add things here  
                       
                }
            }
            

            //cleanup
            GC.Collect();
            GC.WaitForPendingFinalizers();

            //rule for releasing com objects:
            //  never use two dots, all COM objects must be referenced and released individually
            //  example: [smth].[smth].[smth] is bad

            //release com objects to fully kill excel process from running in the background
            Marshal.ReleaseComObject(xlRange);
            Marshal.ReleaseComObject(xlWorksheet);

            //close and release
            xlWorkbook.Close();
            Marshal.ReleaseComObject(xlWorkbook);

            //quit and release
            xlApp.Quit();
            Marshal.ReleaseComObject(xlApp);
            Console.ReadLine();
        }

    }
}
